import React from 'react';
import JsPDF from 'jspdf';
import autoTable, { Color, FontStyle } from 'jspdf-autotable';
import { Box } from '@mui/material';
import { getCurrentDate } from '../getCurrentDate';
// eslint-disable-next-line import/no-cycle
import { ReportType } from '../downloadReport';
import { formatKey } from '../formatKey';
import { getStoredUser } from '../user-storage';
import { useGenerateReportDescription } from './useGenerateReportDescription';
import { Base64InterswitchLogo } from '@/public/InterswitchBase64Logo';
import { IReportQueryParams } from '@/context/DownloadReportContext';
import { TextInput } from '@/components/FormikFields';

const previewAndDownloadPdf = (
  pdf: { save: (arg0: string) => void; output: (arg0: string) => any },
  fileName: string
) => {
  // Save file to download folder
  pdf.save(`${fileName}  ${getCurrentDate()}.pdf`);

  // pdf open in a new tab
  const pdfDataUri = pdf.output('datauristring');
  const newTab = window.open();
  newTab?.document.write(
    `<iframe width='100%' height='100%' src='${pdfDataUri}'></iframe>`
  );
};

export const PdfGenerator = ({
  exportData,
  fileName,
  reportType,
  reportQueryParams
}: {
  exportData: Array<any>;
  fileName: string;
  reportQueryParams: IReportQueryParams;
  reportType: ReportType;
}) => {
  const { reportDescription } = useGenerateReportDescription(
    reportType,
    reportQueryParams
  );

  const pdf = new JsPDF();

  // TODO: Need to be dynamic, can use samuel's formatKey function
  pdf.setProperties({
    title: `${reportType} Report`
  });

  pdf.addImage(Base64InterswitchLogo, 'PNG', 10, 5, 40, 10);
  pdf.setFontSize(10);
  pdf.setFont('custom', 'bold');
  pdf.text(`${reportType} Report`, 150, 12);

  // Line width in units (you can adjust this)
  pdf.setLineWidth(0.1);

  // Line color (RGB)
  pdf.setDrawColor(200, 200, 200);
  pdf.line(10, 18, 200, 18);
  pdf.text('Report Generated By', 13, 23);
  pdf.setFont('custom', 'normal');
  pdf.text(`${getStoredUser()?.fullName}`, 13, 28);
  pdf.text(`User ID: ${getStoredUser()?.profiles?.userid}`, 13, 33);
  pdf.setFont('Newsreader', 'normal');
  pdf.text(`Date: ${getCurrentDate()}`, 155, 23);
  pdf.line(10, 36, 200, 36);
  pdf.setFont('Newsreader', 'bold');
  pdf.text(reportDescription, 13, 42);

  const dataKeys = Object.keys(exportData.length > 0 ? exportData[0] : []);
  const itemDetailsHeaders = [
    'S/N',
    ...Object.keys(exportData.length > 0 ? exportData[0] : [])
  ];
  const formatedItemDetailsHeaders = [
    'S/N',
    ...dataKeys.map((key) => formatKey(key))
  ];
  const columnWidths = [
    10,
    ...new Array(itemDetailsHeaders.length - 1).fill(40)
  ];

  const itemDetailsRows = exportData.map((item: any, index: number) => [
    index + 1,
    ...itemDetailsHeaders
      .slice(1)
      .map((header) => item[header]?.toString() || '')
  ]);

  // Define table styles
  const headerStyles = {
    fillColor: [240, 240, 240],
    textColor: [0],
    fontFamily: 'Newsreader',
    fontStyle: 'bold'
  };

  pdf.setFont('Newsreader');

  // Control gapping above the table
  const itemDetailsYStart = 48;

  autoTable(pdf, {
    head: [formatedItemDetailsHeaders],
    body: itemDetailsRows,
    startY: itemDetailsYStart, // Adjust the Y position as needed
    headStyles: {
      fillColor: headerStyles.fillColor as Color,
      textColor: headerStyles.textColor as Color,
      fontStyle: headerStyles.fontStyle as FontStyle,
      fontSize: 10, // Adjust the font size as needed
      font: 'Newsreader', // Set the font family
      halign: 'left'
    },
    columnStyles: {
      0: { cellWidth: columnWidths[0] }, // Adjust column widths as needed
      1: { cellWidth: columnWidths[1] },
      2: { cellWidth: columnWidths[2] },
      3: { cellWidth: columnWidths[3] },
      4: { cellWidth: columnWidths[4] },
      5: { cellWidth: columnWidths[5] },
      6: { cellWidth: columnWidths[6] }
    },
    alternateRowStyles: { fillColor: [255, 255, 255] },
    bodyStyles: {
      fontSize: 10, // Adjust the font size for the body
      font: 'Newsreader', // Set the font family for the body
      cellPadding: { top: 1, right: 5, bottom: 1, left: 2 }, // Adjust cell padding
      textColor: [0, 0, 0] // Set text color for the body
    },
    margin: { top: 10, left: 13 }
  });

  // Add summary and page numbers
  const summaryYStart = pdf.internal.pageSize.getHeight() - 50;
  pdf.text('Interswitch Limited. All Rights Reserved.', 19, summaryYStart + 28);

  // TODO: Displaying pages is causing bugs, need to investigate this
  // const totalPages = pdf.internal.getNumberOfPages();
  // for (let i = 1; i <= totalPages; i + 1) {
  //     pdf.line(10, 283, 200, 283);
  //     pdf.setPage(i);
  //     // pdf.setFont('Newsreader');
  //     pdf.text(
  //         `Page ${i} of ${totalPages}`,
  //         185,
  //         pdf.internal.pageSize.getHeight() - 5
  //     );
  // }

  previewAndDownloadPdf(pdf, fileName);

  return (
    <Box sx={{ margin: '90px 0', padding: '0 25px 45px 0' }}>
      <Box sx={{ marginTop: '10px', marginBottom: '30px', marginLeft: '20px' }}>
        <TextInput name="Search" placeholder="Search" />
      </Box>
    </Box>
  );
};
