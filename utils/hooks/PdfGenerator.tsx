import React from 'react';
import JsPDF from 'jspdf';
import autoTable, { Color, FontStyle } from 'jspdf-autotable';
import { Box } from '@mui/material';
import { getCurrentDate } from '../getCurrentDate';
// eslint-disable-next-line import/no-cycle
import { ReportType } from '../downloadReport';
import { formatKey } from '../formatKey';
import { getBankLogoFromLocalStorage, getStoredUser } from '../user-storage';
import { useGenerateReportDescription } from './useGenerateReportDescription';
import { Base64InterswitchLogo } from '@/public/InterswitchBase64Logo';
import { IReportQueryParams } from '@/context/DownloadReportContext';
import { TextInput } from '@/components/FormikFields';

const previewAndDownloadPdf = (
  pdf: { save: (arg0: string) => void; output: (arg0: string) => any },
  fileName: string
) => {
  pdf.save(`${fileName}  ${getCurrentDate()}.pdf`);
  const pdfDataUri = pdf.output('datauristring');
  const newTab = window.open();
  newTab?.document.write(
    `<iframe width='100%' height='100%' src='${pdfDataUri}'></iframe>`
  );
};

export const PdfGenerator = ({
  exportData,
  fileName,
  reportType,
  reportQueryParams
}: {
  exportData: Array<any>;
  fileName: string;
  reportQueryParams: IReportQueryParams;
  reportType: ReportType;
}) => {
  const { reportDescription } = useGenerateReportDescription(
    reportType,
    reportQueryParams
  );

  const bankLogo = getBankLogoFromLocalStorage() || null;

  const logoImage = bankLogo || Base64InterswitchLogo;

  // Create a new PDF in landscape mode
  const pdf = new JsPDF('l', 'mm', 'a4'); // 'l' for landscape, 'a4' for A4 size

  pdf.setProperties({
    title: `${reportType} Report`
  });

  pdf.addImage(logoImage, 'PNG', 10, 5, 40, 10);
  pdf.setFontSize(10);
  pdf.setFont('custom', 'bold');
  pdf.text(`${reportType} Report`, 150, 12);

  pdf.setLineWidth(0.1);
  pdf.setDrawColor(200, 200, 200);
  pdf.line(10, 18, 297 - 10, 18); // Adjusted for landscape width
  pdf.text('Report Generated By', 13, 23);
  pdf.setFont('custom', 'normal');
  pdf.text(`${getStoredUser()?.fullName}`, 13, 28);
  pdf.text(`User ID: ${getStoredUser()?.profiles?.userid}`, 13, 33);
  pdf.setFont('Newsreader', 'normal');
  pdf.text(`Date: ${getCurrentDate()}`, 250, 23); // Adjusted for landscape width
  pdf.line(10, 36, 297 - 10, 36); // Adjusted for landscape width
  pdf.setFont('Newsreader', 'bold');
  pdf.text(reportDescription, 13, 42);

  const dataKeys = Object.keys(exportData.length > 0 ? exportData[0] : []);
  const itemDetailsHeaders = [
    'S/N',
    ...Object.keys(exportData.length > 0 ? exportData[0] : [])
  ];
  const formatedItemDetailsHeaders = [
    'S/N',
    ...dataKeys.map((key) => formatKey(key))
  ];

  // Calculate column widths dynamically
  const totalPageWidth = 297; // A4 landscape width in mm
  const margin = 20; // Left and right margin
  const availableWidth = totalPageWidth - margin * 2; // Available width for the table
  const minColumnWidth = 20; // Minimum width for each column
  const columnCount = itemDetailsHeaders.length;
  const columnWidths = Array(columnCount).fill(minColumnWidth);

  // Distribute remaining width evenly
  const totalMinWidth = columnCount * minColumnWidth;
  if (totalMinWidth < availableWidth) {
    const remainingWidth = availableWidth - totalMinWidth;
    const extraWidthPerColumn = remainingWidth / columnCount;
    for (let i = 0; i < columnCount; i += 1) {
      columnWidths[i] += extraWidthPerColumn;
    }
  }

  const itemDetailsRows = exportData.map((item: any, index: number) => [
    index + 1,
    ...itemDetailsHeaders
      .slice(1)
      .map((header) => item[header]?.toString() || '')
  ]);

  const headerStyles = {
    fillColor: [240, 240, 240],
    textColor: [0],
    fontFamily: 'Newsreader',
    fontStyle: 'bold'
  };

  pdf.setFont('Newsreader');

  const itemDetailsYStart = 48;

  autoTable(pdf, {
    head: [formatedItemDetailsHeaders],
    body: itemDetailsRows,
    startY: itemDetailsYStart,
    headStyles: {
      fillColor: headerStyles.fillColor as Color,
      textColor: headerStyles.textColor as Color,
      fontStyle: headerStyles.fontStyle as FontStyle,
      fontSize: 8, // Reduced font size for headers
      font: 'Newsreader',
      halign: 'left'
    },
    columnStyles: Object.fromEntries(
      columnWidths.map((width, index) => [index, { cellWidth: width }])
    ),
    alternateRowStyles: { fillColor: [255, 255, 255] },
    bodyStyles: {
      fontSize: 8, // Reduced font size for body
      font: 'Newsreader',
      cellPadding: { top: 1, right: 5, bottom: 1, left: 2 },
      textColor: [0, 0, 0]
    },
    margin: { top: 10, left: 13 }
  });

  const summaryYStart = pdf.internal.pageSize.getHeight() - 50;
  pdf.text('Interswitch Limited. All Rights Reserved.', 19, summaryYStart + 28);

  previewAndDownloadPdf(pdf, fileName);

  return (
    <Box sx={{ margin: '90px 0', padding: '0 25px 45px 0' }}>
      <Box sx={{ marginTop: '10px', marginBottom: '30px', marginLeft: '20px' }}>
        <TextInput name="Search" placeholder="Search" />
      </Box>
    </Box>
  );
};
